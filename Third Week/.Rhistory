getwd()
setwd("C:/Users/Rodrigo/Documents/GitHub/R_course_Coursera/ProgrammingAssignment2")
?setwd
setwd("C:/Users/Rodrigo/Documents/GitHub/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(inverse) m <<- inverse
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_solve(m)
m
}
?matrix
mat <-matrix(1:4, nrow = 2 , ncol = 2)
mat
makeCacheMatrix(mat)
cachesol(mat)
cacheSolve(mat)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2))
cachemean(c(1,2))
vect_test <- makeVector(c(1,2))
vect_test
y <-c(1,2)
list_test<-makeVector(c(1,2))
list_test
cachemean(list_test)
matrix <- matrix(c(1,2,2,5) , nrow = 2 , ncol=2)
matrix
matrix <- matrix(c(2,3,2,5) , nrow = 2 , ncol=2)
matrix
matrix_test <- makeCacheMatrix(matrix
)
matrix_test
cacheSolve(matrix_test)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(solve) m <<- solve
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
cacheSolve(matrix_test)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(inverse) m <<- inverse
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
y <- matrix(c(2,3,2,5))
cache_y <- makeCacheMatrix()
cacheSolve(cache_y)
y <- matrix(c(2,3,2,5), nrow = 2 , ncol02)
y <- matrix(c(2,3,2,5), nrow = 2 , ncol=2)
y
y <- matrix(c(2,2,3,5), nrow = 2 , ncol=2)
y
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(inverse) m <<- inverse
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
cache_y <- makeCacheMatrix()
cacheSolve(cache_y)
y
cache_y
View(y)
View(y)
cacheSolve(cache_y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(solve) m <<- solve
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
y <- matrix(c(2,2,3,5), nrow = 2 , ncol=2)
y
cache_y <- makeCacheMatrix()
cache_y
cacheSolve(cache_y)
cache_y$set
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y <- c(1,2)
cache_y<- makeVector()
cachemean(cache_y)
cache_y<- makeVector(x)
cache_y
cache_y <- makeCacheMatrix()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
my_vector <-makeVector(c(2,5))
my_vector
cachemean(my_vector)
args(makeVector)
y<-c(2,5)
my_vector <-makeVector()
cachemean(my_vector)
?makeVector
makeCacheMatrix <- function(x = matrix()) {
inv<- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
set_inverse <- function(inverse) inv <<- inverse
get_inverse <- function() inv
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$set_inverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv<- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
set_inverse <- function(inverse) inv <<- inverse
get_inverse <- function() inv
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$get_inverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
inv <- solve(data, ...)
x$set_inverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(c(2,2,3,5), nrow=2,ncol=2)
my_matrix
my_matrix <- makeCacheMatrix(matrix(c(2,2,3,5), nrow=2,ncol=2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix
my_vector$get_inverse(9)
my_matrix$get_inverse()
diffusion_many_coef <- read.csv("~/GitHub/Scattering-map-3and-1-2-dof/scat_and_inner_s_non_zero/diffusion_many_coef.csv", header=FALSE)
View(diffusion_many_coef)
